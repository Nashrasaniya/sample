import cv2
import numpy as np
import tensorflow as tf

# Load the trained model
model = tf.keras.models.load_model("C:/Users/MUBEEN/OneDrive/Documents/SANIYA/my_model.keras")

# Load OpenCV face detector
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Start webcam
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        print("Error: Failed to capture image")
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    for (x, y, w, h) in faces:
        face = frame[y:y+h, x:x+w]  # Extract face region

        if face.size == 0:
            continue

        face = cv2.resize(face, (64, 64))  # Resize to 64x64
        face = np.array(face, dtype=np.float32) / 255.0  # Normalize
        face = face.flatten()  # Flatten to 1D

        # Ensure the shape matches (1, 20)
        face = np.expand_dims(face[:20], axis=0)  # Take only the first 20 features

        # Debug: Check Shape
        print("Actual Face Shape:", face.shape)  # Should be (1, 20)

        # Make prediction
        prediction = model.predict(face)[0][0]  # Get model output
        label = "Male" if prediction > 0.5 else "Female"
        color = (255, 0, 0) if label == "Male" else (0, 0, 255)

        # Draw rectangle and label
        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)

    cv2.imshow("Live Face Detection", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
